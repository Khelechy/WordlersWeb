/**
 * Minified by jsDelivr using Terser v5.15.0.
 * Original file: /npm/@microsoft/signalr-protocol-msgpack@6.0.9/dist/cjs/MessagePackHubProtocol.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.MessagePackHubProtocol=void 0;const msgpack_1=require("@msgpack/msgpack"),signalr_1=require("@microsoft/signalr"),BinaryMessageFormat_1=require("./BinaryMessageFormat"),Utils_1=require("./Utils"),SERIALIZED_PING_MESSAGE=new Uint8Array([145,signalr_1.MessageType.Ping]);class MessagePackHubProtocol{constructor(e){this.name="messagepack",this.version=1,this.transferFormat=signalr_1.TransferFormat.Binary,this._errorResult=1,this._voidResult=2,this._nonVoidResult=3,e=e||{},this._encoder=new msgpack_1.Encoder(e.extensionCodec,e.context,e.maxDepth,e.initialBufferSize,e.sortKeys,e.forceFloat32,e.ignoreUndefined,e.forceIntegerToFloat),this._decoder=new msgpack_1.Decoder(e.extensionCodec,e.context,e.maxStrLength,e.maxBinLength,e.maxArrayLength,e.maxMapLength,e.maxExtLength)}parseMessages(e,r){if(!Utils_1.isArrayBuffer(e))throw new Error("Invalid input for MessagePack hub protocol. Expected an ArrayBuffer.");null===r&&(r=signalr_1.NullLogger.instance);const s=BinaryMessageFormat_1.BinaryMessageFormat.parse(e),a=[];for(const e of s){const s=this._parseMessage(e,r);s&&a.push(s)}return a}writeMessage(e){switch(e.type){case signalr_1.MessageType.Invocation:return this._writeInvocation(e);case signalr_1.MessageType.StreamInvocation:return this._writeStreamInvocation(e);case signalr_1.MessageType.StreamItem:return this._writeStreamItem(e);case signalr_1.MessageType.Completion:return this._writeCompletion(e);case signalr_1.MessageType.Ping:return BinaryMessageFormat_1.BinaryMessageFormat.write(SERIALIZED_PING_MESSAGE);case signalr_1.MessageType.CancelInvocation:return this._writeCancelInvocation(e);default:throw new Error("Invalid message type.")}}_parseMessage(e,r){if(0===e.length)throw new Error("Invalid payload.");const s=this._decoder.decode(e);if(0===s.length||!(s instanceof Array))throw new Error("Invalid payload.");const a=s[0];switch(a){case signalr_1.MessageType.Invocation:return this._createInvocationMessage(this._readHeaders(s),s);case signalr_1.MessageType.StreamItem:return this._createStreamItemMessage(this._readHeaders(s),s);case signalr_1.MessageType.Completion:return this._createCompletionMessage(this._readHeaders(s),s);case signalr_1.MessageType.Ping:return this._createPingMessage(s);case signalr_1.MessageType.Close:return this._createCloseMessage(s);default:return r.log(signalr_1.LogLevel.Information,"Unknown message type '"+a+"' ignored."),null}}_createCloseMessage(e){if(e.length<2)throw new Error("Invalid payload for Close message.");return{allowReconnect:e.length>=3?e[2]:void 0,error:e[1],type:signalr_1.MessageType.Close}}_createPingMessage(e){if(e.length<1)throw new Error("Invalid payload for Ping message.");return{type:signalr_1.MessageType.Ping}}_createInvocationMessage(e,r){if(r.length<5)throw new Error("Invalid payload for Invocation message.");const s=r[2];return s?{arguments:r[4],headers:e,invocationId:s,streamIds:[],target:r[3],type:signalr_1.MessageType.Invocation}:{arguments:r[4],headers:e,streamIds:[],target:r[3],type:signalr_1.MessageType.Invocation}}_createStreamItemMessage(e,r){if(r.length<4)throw new Error("Invalid payload for StreamItem message.");return{headers:e,invocationId:r[2],item:r[3],type:signalr_1.MessageType.StreamItem}}_createCompletionMessage(e,r){if(r.length<4)throw new Error("Invalid payload for Completion message.");const s=r[3];if(s!==this._voidResult&&r.length<5)throw new Error("Invalid payload for Completion message.");let a,t;switch(s){case this._errorResult:a=r[4];break;case this._nonVoidResult:t=r[4]}return{error:a,headers:e,invocationId:r[2],result:t,type:signalr_1.MessageType.Completion}}_writeInvocation(e){let r;return r=e.streamIds?this._encoder.encode([signalr_1.MessageType.Invocation,e.headers||{},e.invocationId||null,e.target,e.arguments,e.streamIds]):this._encoder.encode([signalr_1.MessageType.Invocation,e.headers||{},e.invocationId||null,e.target,e.arguments]),BinaryMessageFormat_1.BinaryMessageFormat.write(r.slice())}_writeStreamInvocation(e){let r;return r=e.streamIds?this._encoder.encode([signalr_1.MessageType.StreamInvocation,e.headers||{},e.invocationId,e.target,e.arguments,e.streamIds]):this._encoder.encode([signalr_1.MessageType.StreamInvocation,e.headers||{},e.invocationId,e.target,e.arguments]),BinaryMessageFormat_1.BinaryMessageFormat.write(r.slice())}_writeStreamItem(e){const r=this._encoder.encode([signalr_1.MessageType.StreamItem,e.headers||{},e.invocationId,e.item]);return BinaryMessageFormat_1.BinaryMessageFormat.write(r.slice())}_writeCompletion(e){const r=e.error?this._errorResult:e.result?this._nonVoidResult:this._voidResult;let s;switch(r){case this._errorResult:s=this._encoder.encode([signalr_1.MessageType.Completion,e.headers||{},e.invocationId,r,e.error]);break;case this._voidResult:s=this._encoder.encode([signalr_1.MessageType.Completion,e.headers||{},e.invocationId,r]);break;case this._nonVoidResult:s=this._encoder.encode([signalr_1.MessageType.Completion,e.headers||{},e.invocationId,r,e.result])}return BinaryMessageFormat_1.BinaryMessageFormat.write(s.slice())}_writeCancelInvocation(e){const r=this._encoder.encode([signalr_1.MessageType.CancelInvocation,e.headers||{},e.invocationId]);return BinaryMessageFormat_1.BinaryMessageFormat.write(r.slice())}_readHeaders(e){const r=e[1];if("object"!=typeof r)throw new Error("Invalid headers.");return r}}exports.MessagePackHubProtocol=MessagePackHubProtocol;
//# sourceMappingURL=/sm/1184f750e4be88bb8ad0cb4edb939aeeeb108601eccac29863bd1c480f67cbdf.map